// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using EFCoreDemo.Models;
using Microsoft.EntityFrameworkCore;

namespace EFCoreDemo.Data;

public partial class SakilaContext : DbContext
{
    public SakilaContext(DbContextOptions<SakilaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actor> Actors { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerList> CustomerLists { get; set; }

    public virtual DbSet<Film> Films { get; set; }

    public virtual DbSet<FilmActor> FilmActors { get; set; }

    public virtual DbSet<FilmCategory> FilmCategories { get; set; }

    public virtual DbSet<FilmList> FilmLists { get; set; }

    public virtual DbSet<FilmText> FilmTexts { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Rental> Rentals { get; set; }

    public virtual DbSet<SalesByFilmCategory> SalesByFilmCategories { get; set; }

    public virtual DbSet<SalesByStore> SalesByStores { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<StaffList> StaffLists { get; set; }

    public virtual DbSet<Store> Stores { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actor>(entity =>
        {
            entity.HasKey(e => e.ActorId).HasName("PK__actor__8B2447B43086B414");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK__address__CAA247C8AD18EA60");

            entity.Property(e => e.Address2).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.PostalCode).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.City).WithMany(p => p.Addresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_address_city");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__category__D54EE9B497196367");

            entity.Property(e => e.CategoryId).ValueGeneratedOnAdd();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__city__031491A859E4B271");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Country).WithMany(p => p.Cities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_city_country");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("PK__country__7E8CD055FAD82084");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__customer__CD65CB854AF2FE34");

            entity.Property(e => e.Active)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Email).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Address).WithMany(p => p.Customers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_customer_address");

            entity.HasOne(d => d.Store).WithMany(p => p.Customers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_customer_store");
        });

        modelBuilder.Entity<CustomerList>(entity =>
        {
            entity.ToView("customer_list");
        });

        modelBuilder.Entity<Film>(entity =>
        {
            entity.HasKey(e => e.FilmId).HasName("PK__film__349764A9F41DE45F");

            entity.Property(e => e.Description).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Length).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OriginalLanguageId).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Rating).HasDefaultValue("G");
            entity.Property(e => e.RentalDuration).HasDefaultValue((byte)3);
            entity.Property(e => e.RentalRate).HasDefaultValue(4.99m);
            entity.Property(e => e.ReplacementCost).HasDefaultValue(19.99m);
            entity.Property(e => e.SpecialFeatures).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.Language).WithMany(p => p.FilmLanguages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_film_language");

            entity.HasOne(d => d.OriginalLanguage).WithMany(p => p.FilmOriginalLanguages).HasConstraintName("fk_film_language_original");
        });

        modelBuilder.Entity<FilmActor>(entity =>
        {
            entity.HasKey(e => new { e.ActorId, e.FilmId }).HasName("PK__film_act__086D31FE5635052A");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Actor).WithMany(p => p.FilmActors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_film_actor_actor");

            entity.HasOne(d => d.Film).WithMany(p => p.FilmActors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_film_actor_film");
        });

        modelBuilder.Entity<FilmCategory>(entity =>
        {
            entity.HasKey(e => new { e.FilmId, e.CategoryId }).HasName("PK__film_cat__69C38A32E4C407F7");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Category).WithMany(p => p.FilmCategories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_film_category_category");

            entity.HasOne(d => d.Film).WithMany(p => p.FilmCategories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_film_category_film");
        });

        modelBuilder.Entity<FilmList>(entity =>
        {
            entity.ToView("film_list");
        });

        modelBuilder.Entity<FilmText>(entity =>
        {
            entity.HasKey(e => e.FilmId).HasName("PK__film_tex__349764A983A72062");

            entity.Property(e => e.FilmId).ValueGeneratedNever();
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PK__inventor__B59ACC4917688709");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Film).WithMany(p => p.Inventories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_inventory_film");

            entity.HasOne(d => d.Store).WithMany(p => p.Inventories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_inventory_store");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.HasKey(e => e.LanguageId).HasName("PK__language__804CF6B3AC046EE2");

            entity.Property(e => e.LanguageId).ValueGeneratedOnAdd();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Name).IsFixedLength();
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__payment__ED1FC9EA909E2A72");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.RentalId).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_payment_customer");

            entity.HasOne(d => d.Rental).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_payment_rental");

            entity.HasOne(d => d.Staff).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_payment_staff");
        });

        modelBuilder.Entity<Rental>(entity =>
        {
            entity.HasKey(e => e.RentalId).HasName("PK__rental__67DB611BAFB07E75");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ReturnDate).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.Customer).WithMany(p => p.Rentals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_rental_customer");

            entity.HasOne(d => d.Inventory).WithMany(p => p.Rentals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_rental_inventory");

            entity.HasOne(d => d.Staff).WithMany(p => p.Rentals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_rental_staff");
        });

        modelBuilder.Entity<SalesByFilmCategory>(entity =>
        {
            entity.ToView("sales_by_film_category");
        });

        modelBuilder.Entity<SalesByStore>(entity =>
        {
            entity.ToView("sales_by_store");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__staff__1963DD9CBF010BE4");

            entity.Property(e => e.StaffId).ValueGeneratedOnAdd();
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Email).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Password).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Picture).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.Address).WithMany(p => p.Staff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_staff_address");

            entity.HasOne(d => d.Store).WithMany(p => p.Staff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_staff_store");
        });

        modelBuilder.Entity<StaffList>(entity =>
        {
            entity.ToView("staff_list");
        });

        modelBuilder.Entity<Store>(entity =>
        {
            entity.HasKey(e => e.StoreId).HasName("PK__store__A2F2A30CCCE3C042");

            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Address).WithMany(p => p.Stores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_store_address");

            entity.HasOne(d => d.ManagerStaff).WithOne(p => p.StoreNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_store_staff");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}